package pe.com.cibertec.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;

import java.util.List;
import java.util.Optional;

import pe.com.cibertec.repository.ProductoRepository;
import pe.com.cibertec.repository.UsuarioRepository;
import pe.com.cibertec.service.ProductoService;
import pe.com.cibertec.model.entity.ProductoEntity;


@Service
@RequiredArgsConstructor
public class ProductoServiceImpl implements ProductoService{

	private final ProductoRepository productoRepository;
	
	public ProductoServiceImpl(ProductoRepository productoRepository) {
		this.productoRepository = productoRepository;
	}

	@Override
	public List<ProductoEntity> buscarTodosProductos() {
		// TODO Auto-generated method stub
		return productoRepository.findAll();
	}

	@Override
	public ProductoEntity buscarProductoPorId(Integer id_producto) {
		// TODO Auto-generated method stub
		Optional<ProductoEntity> productoOpt = productoRepository.findById(id_producto);
		if(productoOpt.isPresent()) {
			return productoOpt.get();
		}else {
			throw new RuntimeException("Producto no encontrado para el ID: " +id_producto);
		}
	}

	@Override
	public void crearProducto(ProductoEntity productoEntity) {
		productoRepository.save(productoEntity);
		
	}

	// Actualizar un producto existente
    @Override
    public ProductoEntity actualizarProducto(Long id, ProductoEntity productoEntity) {
        ProductoEntity productoExistente = obtenerProductoPorId(id);
        
        productoExistente.setNombreProducto(productoEntity.getNombreProducto());
        productoExistente.setPrecio(productoEntity.getPrecio());
        productoExistente.setStock(productoEntity.getStock());
        productoExistente.setCategoria(productoEntity.getCategoria());

        return productoRepository.save(productoExistente);
    }

    // Eliminar un producto por ID
    @Override
    public void eliminarProducto(Long id) {
        ProductoEntity productoExistente = obtenerProductoPorId(id);
        productoRepository.delete(productoExistente);
    }
}
